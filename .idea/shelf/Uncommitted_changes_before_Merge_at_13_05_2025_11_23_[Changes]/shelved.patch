Index: app/src/main/java/at/ac/univie/hci/tsug/activities/SearchActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.ac.univie.hci.tsug.activities;\r\n\r\nimport android.app.DatePickerDialog;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.DatePicker;\r\nimport android.widget.EditText;\r\nimport android.widget.RadioGroup;\r\nimport android.widget.Spinner;\r\nimport androidx.activity.EdgeToEdge;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.graphics.Insets;\r\nimport androidx.core.view.ViewCompat;\r\nimport androidx.core.view.WindowInsetsCompat;\r\n\r\nimport com.google.android.material.chip.Chip;\r\nimport com.google.android.material.chip.ChipGroup;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.stream.Collectors;\r\n\r\nimport at.ac.univie.hci.tsug.R;\r\nimport at.ac.univie.hci.tsug.MainActivity;\r\nimport at.ac.univie.hci.tsug.container.Container;\r\nimport at.ac.univie.hci.tsug.elements.Post;\r\n\r\npublic class SearchActivity extends AppCompatActivity {\r\n    private EditText etSearchQuery, etDateFrom, etDateTo;\r\n    private RadioGroup rgCategory;\r\n    private Spinner spinnerRecency;\r\n    private ChipGroup chipGroupTags;\r\n    private Button btnSearch;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        EdgeToEdge.enable(this);\r\n        setContentView(R.layout.activity_search);\r\n\r\n        ViewCompat.setOnApplyWindowInsetsListener(\r\n                findViewById(R.id.main), (v, insets) -> {\r\n                    Insets bars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\r\n                    v.setPadding(bars.left, bars.top, bars.right, bars.bottom);\r\n                    return insets;\r\n                }\r\n        );\r\n\r\n        //activity Komponenten initialisieren\r\n        etSearchQuery = findViewById(R.id.et_search_query);\r\n        rgCategory     = findViewById(R.id.rg_category);\r\n        etDateFrom     = findViewById(R.id.et_date_from);\r\n        etDateTo       = findViewById(R.id.et_date_to);\r\n        spinnerRecency = findViewById(R.id.spinner_recency);\r\n        chipGroupTags  = findViewById(R.id.chip_group_tags);\r\n        btnSearch      = findViewById(R.id.btn_search);\r\n        spinnerRecency = findViewById(R.id.spinner_recency);\r\n\r\n        //Adapter für Aktualität-Spinner setzen\r\n        ArrayAdapter<CharSequence> recencyAdapter = ArrayAdapter.createFromResource(\r\n                this,\r\n                R.array.aktualitaet_options,\r\n                android.R.layout.simple_spinner_item\r\n        );\r\n        recencyAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        spinnerRecency.setAdapter(recencyAdapter);\r\n\r\n        //Per Default ist Alles als Kategorie gewählt\r\n        rgCategory.check(R.id.rb_alles);\r\n\r\n        //Suchbegriff von MainActivity holen und vorfüllen - Ist manchmal als Fehler markiert und manchmal nicht WTF\r\n        String initialQuery = MainActivity.getSimpleSearchTerm();\r\n        if (initialQuery != null) {\r\n            etSearchQuery.setText(initialQuery);\r\n        }\r\n\r\n        //DatePicker-Dialoge für Reisedatum - wenn es läuft -> mehr testen\r\n        etDateFrom.setOnClickListener(v -> showDatePicker(etDateFrom));\r\n        etDateTo.setOnClickListener(v   -> showDatePicker(etDateTo));\r\n\r\n        //Tags aus arrays.xml als Chips erzeugen (Keine zum Essen, aber zum Draufdrücken)\r\n        String[] tags = getResources().getStringArray(R.array.tag_options);\r\n        for (String tag : tags) {\r\n            Chip chip = new Chip(this);\r\n            chip.setText(tag);\r\n            chip.setCheckable(true);\r\n            chipGroupTags.addView(chip);\r\n        }\r\n\r\n        //Such-Button Listener (richtig mit Ohren)\r\n        btnSearch.setOnClickListener(v -> applyFilters());\r\n    }\r\n\r\n    //Filtert alle Posts anhand der Nutzerkriterien und startet die Ergebnis-Activity (-> activity_search_results.xml)\r\n    private void applyFilters() {\r\n        //LADEN VON DEN FILTERN\r\n        //Freitext\r\n        String query = etSearchQuery.getText().toString().trim().toLowerCase(Locale.getDefault());\r\n\r\n        //Kategorie\r\n        int catId = rgCategory.getCheckedRadioButtonId();\r\n        String category = catId == R.id.rb_frage ? \"Frage\"\r\n                : catId == R.id.rb_tipp  ? \"Tipp\"\r\n                :                           \"Alles\";\r\n\r\n        //Reisedatum\r\n        String dateFrom = etDateFrom.getText().toString().trim();\r\n        String dateTo   = etDateTo.getText().toString().trim();\r\n\r\n        //Aktualität\r\n        String recency = spinnerRecency.getSelectedItem().toString();\r\n\r\n        //Tags\r\n        List<String> selectedTags = new ArrayList<>();\r\n        for (int i = 0; i < chipGroupTags.getChildCount(); i++) {\r\n            Chip c = (Chip) chipGroupTags.getChildAt(i);\r\n            if (c.isChecked()) selectedTags.add(c.getText().toString());\r\n        }\r\n\r\n        //Für Spinner, damit es nicht schon wieder spinnt...\r\n        LocalDate now = LocalDate.now();\r\n        LocalDate threshold = null;\r\n        switch (recency) {\r\n            case \"Heute\":\r\n                threshold = now;\r\n                break;\r\n            case \"Diese Woche\":\r\n                threshold = now.minusWeeks(1);\r\n                break;\r\n            case \"Diesen Monat\":\r\n                threshold = now.minusMonths(1);\r\n                break;\r\n        }\r\n\r\n        //ALLE POSTS LADEN UND FILTERN (d.h. Filter anwenden)\r\n        List<Post> allPosts = new ArrayList<>(Container.getAllPosts()); //getAllPosts ist rot, aber es wird in activity_main.xml verwendet?! - MAAAAAAAAARRRRRRTTTTTTTTIIIIIIIINNNNNNNNNNNN\r\n        List<Post> filtered = allPosts.stream()\r\n                .filter(p -> {\r\n                    //Textsuche in Titel oder Beschreibung\r\n                    boolean matchesText = query.isEmpty()\r\n                            || p.getTitle().toLowerCase().contains(query)\r\n                            || p.getDes().toLowerCase().contains(query);\r\n                    if (!matchesText) return false;\r\n\r\n                    //Kategorie\r\n                    if (!category.equals(\"Alles\") && !p.getTags().contains(category)) return false;\r\n\r\n                    //Datumsbereich (Als dd.mm.yyyy -> gehe davon aus)\r\n                    if (!dateFrom.isEmpty() || !dateTo.isEmpty()) {\r\n                        try {\r\n                            java.time.LocalDate from = dateFrom.isEmpty()\r\n                                    ? java.time.LocalDate.MIN\r\n                                    : java.time.LocalDate.parse(dateFrom, java.time.format.DateTimeFormatter.ofPattern(\"dd.MM.yyyy\"));\r\n                            java.time.LocalDate to = dateTo.isEmpty()\r\n                                    ? java.time.LocalDate.MAX\r\n                                    : java.time.LocalDate.parse(dateTo, java.time.format.DateTimeFormatter.ofPattern(\"dd.MM.yyyy\"));\r\n                            if (p.getDate().isBefore(from) || p.getDate().isAfter(to)) return false;\r\n                        } catch (Exception x) {\r\n                            //ignorieren bei Parse-Fehlern\r\n                        }\r\n                    }\r\n\r\n                    //Aktualität (Spinner) anwenden - wenn es denn mal geht...\r\n                    if (threshold != null && p.getDate().isBefore(threshold)) return false;\r\n\r\n                    //Tags\r\n                    if (!selectedTags.isEmpty()) {\r\n                        if (p.getTags().stream().noneMatch(selectedTags::contains)) return false;\r\n                    }\r\n                    return true;\r\n                })\r\n                .collect(Collectors.toList());\r\n\r\n        //Ergebnisse weiterreichen\r\n        Intent intent = new Intent(this, SearchResultsActivity.class);\r\n        intent.putParcelableArrayListExtra(\"results\", new ArrayList<>(filtered)); //Hier manchmal rot markiert das new ArrayList...\r\n        startActivity(intent);\r\n    }\r\n\r\n    //Zeigt einen DatePickerDialog und trägt das Ergebnis ins Ziel-EditText ein.\r\n    private void showDatePicker(final EditText target) {\r\n        Calendar c = Calendar.getInstance();\r\n        new DatePickerDialog(\r\n                this,\r\n                (DatePicker view, int y, int m, int d) -> {\r\n                    String formatted = String.format(\r\n                            Locale.getDefault(), \"%02d.%02d.%04d\", d, m + 1, y\r\n                    );\r\n                    target.setText(formatted);\r\n                },\r\n                c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DAY_OF_MONTH)\r\n        ).show();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/at/ac/univie/hci/tsug/activities/SearchActivity.java b/app/src/main/java/at/ac/univie/hci/tsug/activities/SearchActivity.java
--- a/app/src/main/java/at/ac/univie/hci/tsug/activities/SearchActivity.java	(revision 286bd97eecfc82151ae00dadee5cbf353f7cca74)
+++ b/app/src/main/java/at/ac/univie/hci/tsug/activities/SearchActivity.java	(date 1747128211167)
@@ -3,7 +3,6 @@
 import android.app.DatePickerDialog;
 import android.content.Intent;
 import android.os.Bundle;
-import android.widget.ArrayAdapter;
 import android.widget.Button;
 import android.widget.DatePicker;
 import android.widget.EditText;
@@ -18,17 +17,19 @@
 import com.google.android.material.chip.Chip;
 import com.google.android.material.chip.ChipGroup;
 
-import java.time.LocalDate;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.List;
 import java.util.Locale;
 import java.util.stream.Collectors;
+import java.time.LocalDate;
+import java.time.format.DateTimeFormatter;
 
 import at.ac.univie.hci.tsug.R;
 import at.ac.univie.hci.tsug.MainActivity;
-import at.ac.univie.hci.tsug.container.Container;
+import at.ac.univie.hci.tsug.container.PostContainer;
 import at.ac.univie.hci.tsug.elements.Post;
+import android.widget.ArrayAdapter;
 
 public class SearchActivity extends AppCompatActivity {
     private EditText etSearchQuery, etDateFrom, etDateTo;
@@ -138,12 +139,12 @@
         }
 
         //ALLE POSTS LADEN UND FILTERN (d.h. Filter anwenden)
-        List<Post> allPosts = new ArrayList<>(Container.getAllPosts()); //getAllPosts ist rot, aber es wird in activity_main.xml verwendet?! - MAAAAAAAAARRRRRRTTTTTTTTIIIIIIIINNNNNNNNNNNN
+        List<Post> allPosts = new ArrayList<>(PostContainer.getAllPosts()); //getAllPosts ist rot, aber es wird in activity_main.xml verwendet?! - MAAAAAAAAARRRRRRTTTTTTTTIIIIIIIINNNNNNNNNNNN
         List<Post> filtered = allPosts.stream()
                 .filter(p -> {
                     //Textsuche in Titel oder Beschreibung
                     boolean matchesText = query.isEmpty()
-                            || p.getTitle().toLowerCase().contains(query)
+                            || p.getTitel().toLowerCase().contains(query)
                             || p.getDes().toLowerCase().contains(query);
                     if (!matchesText) return false;
 
